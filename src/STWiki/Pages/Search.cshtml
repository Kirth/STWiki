@page "/search"
@model STWiki.Pages.SearchModel
@{
    ViewData["Title"] = "Search";
}

<style>
    .search-highlight mark {
        background-color: #fff3cd;
        color: #856404;
        padding: 0.1em 0.2em;
        border-radius: 0.25rem;
        font-weight: 600;
    }
    
    .search-result-snippet {
        font-size: 0.9rem;
        line-height: 1.4;
        color: #6c757d;
    }
    
    .search-match-badge {
        font-size: 0.7rem;
    }
    
    .pagination .page-link {
        color: #495057;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }
    
    .list-group-item:hover {
        background-color: #f8f9fa;
        transition: background-color 0.15s ease-in-out;
    }
</style>

<div class="wiki-container">
    <h1>Search Wiki</h1>
    
    <form method="get" class="mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" name="q" value="@Model.Query" placeholder="Search pages and content..." />
            <button class="btn btn-primary" type="submit">
                <i class="bi bi-search"></i> Search
            </button>
            <button class="btn btn-outline-secondary" type="button" onclick="toggleAdvancedFilters()">
                <i class="bi bi-funnel"></i> Filters
            </button>
        </div>

        <!-- Advanced Search Filters (Initially Hidden) -->
        <div id="advancedFilters" class="card @(Model.UseAdvancedSearch ? "" : "d-none")" style="@(Model.UseAdvancedSearch ? "" : "display: none;")">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">ðŸŽ¯ Search In:</h6>
                        <div class="form-check">
                            <input asp-for="SearchInTitle" class="form-check-input" type="checkbox" />
                            <label asp-for="SearchInTitle" class="form-check-label">Page Titles</label>
                        </div>
                        <div class="form-check">
                            <input asp-for="SearchInContent" class="form-check-input" type="checkbox" />
                            <label asp-for="SearchInContent" class="form-check-label">Page Content</label>
                        </div>
                        <div class="form-check">
                            <input asp-for="SearchInCode" class="form-check-input" type="checkbox" />
                            <label asp-for="SearchInCode" class="form-check-label">
                                <strong>Code Blocks Only</strong> âœ¨
                            </label>
                        </div>
                        <div class="form-check">
                            <input asp-for="SearchInSummary" class="form-check-input" type="checkbox" />
                            <label asp-for="SearchInSummary" class="form-check-label">Page Summaries</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">ðŸ”§ Filters:</h6>
                        <div class="mb-3" id="languageFilter" style="@(Model.SearchInCode ? "" : "display: none;")">
                            <label asp-for="Language" class="form-label">Programming Language:</label>
                            <select asp-for="Language" class="form-select form-select-sm">
                                <option value="">Any Language</option>
                                <option value="csharp">C#</option>
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="java">Java</option>
                                <option value="cpp">C++</option>
                                <option value="sql">SQL</option>
                                <option value="html">HTML</option>
                                <option value="css">CSS</option>
                                <option value="json">JSON</option>
                                <option value="xml">XML</option>
                                <option value="bash">Bash</option>
                                <option value="powershell">PowerShell</option>
                                <option value="yaml">YAML</option>
                                <option value="dockerfile">Dockerfile</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Author" class="form-label">Author:</label>
                            <input asp-for="Author" class="form-control form-control-sm" placeholder="Filter by author..." />
                        </div>
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-sm btn-primary">Apply Filters</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearFilters()">Clear</button>
                        </div>
                    </div>
                </div>
                <div class="mt-3">
                    <small class="text-muted">
                        <strong>Pro tip:</strong> Use advanced syntax like <code>in:code python</code>, <code>title:security</code>, <code>lang:python</code>, or <code>"exact phrase"</code>
                    </small>
                </div>
            </div>
        </div>
    </form>
    
    @if (!string.IsNullOrWhiteSpace(Model.Query))
    {
        @if (Model.Results?.Any() == true)
        {
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3>Search Results (@Model.TotalResults found)</h3>
                <small class="text-muted">
                    Page @Model.Page of @Model.TotalPages
                </small>
            </div>
            
            <div class="list-group mb-4 search-highlight">
                @foreach (var result in Model.Results)
                {
                    <div class="list-group-item">
                        <div class="d-flex w-100 justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="mb-1">
                                    <a asp-page="/Wiki/View" asp-route-slug="@result.Page.Slug" class="text-decoration-none">
                                        @Html.Raw(result.HighlightedTitle)
                                    </a>
                                    @if (result.MatchType == "title")
                                    {
                                        <small class="badge bg-success ms-2 search-match-badge">Title Match</small>
                                    }
                                    @if (result.MatchType == "code" && !string.IsNullOrEmpty(result.CodeLanguage))
                                    {
                                        <small class="badge bg-warning ms-2 search-match-badge">Code (@result.CodeLanguage)</small>
                                    }
                                </h5>
                                
                                @if (!string.IsNullOrWhiteSpace(result.HighlightedSummary))
                                {
                                    <div class="page-summary-result mb-2">
                                        <p class="mb-1 text-secondary lead" style="font-size: 1rem;">
                                            <i class="bi bi-info-circle text-primary me-1"></i>
                                            @Html.Raw(result.HighlightedSummary)
                                            @if (result.MatchType == "summary")
                                            {
                                                <small class="badge bg-info ms-2 search-match-badge">Summary Match</small>
                                            }
                                        </p>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrWhiteSpace(result.BodySnippet))
                                {
                                    <div class="mb-1 search-result-snippet">
                                        @Html.Raw(result.BodySnippet)
                                        @if (result.MatchType == "code")
                                        {
                                            <small class="badge bg-warning ms-1 search-match-badge">Code Match</small>
                                        }
                                        else
                                        {
                                            <small class="badge bg-secondary ms-1 search-match-badge">Content Match</small>
                                        }
                                    </div>
                                }
                                
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        <i class="bi bi-clock"></i> Updated @result.Page.UpdatedAt.ToString("yyyy-MM-dd HH:mm") by @result.Page.UpdatedBy
                                        @if (result.Page.CreatedAt != result.Page.UpdatedAt)
                                        {
                                            <span class="ms-2">
                                                <i class="bi bi-calendar-plus"></i> Created @result.Page.CreatedAt.ToString("yyyy-MM-dd")
                                            </span>
                                        }
                                    </small>
                                    <small class="text-muted">
                                        <span class="badge bg-light text-dark border">
                                            <i class="bi bi-file-earmark-@(result.Page.BodyFormat == "markdown" ? "text" : "code")"></i>
                                            @result.Page.BodyFormat.ToUpper()
                                        </span>
                                        @if (result.Page.IsLocked)
                                        {
                                            <span class="badge bg-warning text-dark ms-1">
                                                <i class="bi bi-lock"></i> Locked
                                            </span>
                                        }
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Search results pagination">
                    <ul class="pagination justify-content-center">
                        <!-- Previous Page -->
                        <li class="page-item @(Model.Page <= 1 ? "disabled" : "")">
                            <a class="page-link" asp-page="/Search" asp-route-q="@Model.Query" asp-route-page="@(Model.Page - 1)">
                                <i class="bi bi-chevron-left"></i> Previous
                            </a>
                        </li>
                        
                        <!-- Page Numbers -->
                        @{
                            var startPage = Math.Max(1, Model.Page - 2);
                            var endPage = Math.Min(Model.TotalPages, Model.Page + 2);
                        }
                        
                        @if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" asp-page="/Search" asp-route-q="@Model.Query" asp-route-page="1">1</a>
                            </li>
                            @if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }
                        
                        @for (var i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.Page ? "active" : "")">
                                <a class="page-link" asp-page="/Search" asp-route-q="@Model.Query" asp-route-page="@i">@i</a>
                            </li>
                        }
                        
                        @if (endPage < Model.TotalPages)
                        {
                            @if (endPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            <li class="page-item">
                                <a class="page-link" asp-page="/Search" asp-route-q="@Model.Query" asp-route-page="@Model.TotalPages">@Model.TotalPages</a>
                            </li>
                        }
                        
                        <!-- Next Page -->
                        <li class="page-item @(Model.Page >= Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-page="/Search" asp-route-q="@Model.Query" asp-route-page="@(Model.Page + 1)">
                                Next <i class="bi bi-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        }
        else
        {
            <div class="alert alert-info">
                <h4>No results found</h4>
                <p>No pages found matching "<strong>@Model.Query</strong>".</p>
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <p>You can <a asp-page="/Wiki/New" class="alert-link">create a new page</a> with this title.</p>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-secondary">
            <h4>âœ¨ Enhanced Search Features</h4>
            <div class="row">
                <div class="col-md-6">
                    <h6>Basic Search:</h6>
                    <ul>
                        <li>Search looks through page titles and content</li>
                        <li>Use specific keywords for better results</li>
                        <li>Search is case-insensitive</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6>ðŸŽ¯ Advanced Features:</h6>
                    <ul>
                        <li><strong>Search inside code blocks only</strong> - Use filters!</li>
                        <li>Filter by programming language</li>
                        <li>Use <code>"exact phrases"</code> for precise matches</li>
                        <li>Advanced syntax: <code>in:code python</code>, <code>title:security</code></li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

<script>
    function toggleAdvancedFilters() {
        const filters = document.getElementById('advancedFilters');
        if (filters.classList.contains('d-none')) {
            filters.classList.remove('d-none');
            filters.style.display = 'block';
        } else {
            filters.classList.add('d-none');
            filters.style.display = 'none';
        }
    }

    function clearFilters() {
        // Clear all checkboxes
        document.querySelectorAll('#advancedFilters input[type="checkbox"]').forEach(cb => cb.checked = false);
        
        // Clear select and text inputs
        document.querySelectorAll('#advancedFilters select, #advancedFilters input[type="text"]').forEach(input => input.value = '');
        
        // Set content search as default
        document.getElementById('SearchInContent').checked = true;
        
        // Hide language filter
        document.getElementById('languageFilter').style.display = 'none';
    }

    // Show/hide language filter based on code search checkbox
    document.addEventListener('DOMContentLoaded', function() {
        const codeSearch = document.getElementById('SearchInCode');
        const languageFilter = document.getElementById('languageFilter');
        
        function toggleLanguageFilter() {
            if (codeSearch && codeSearch.checked) {
                languageFilter.style.display = 'block';
            } else {
                languageFilter.style.display = 'none';
            }
        }
        
        // Initial state
        toggleLanguageFilter();
        
        // Listen for changes
        if (codeSearch) {
            codeSearch.addEventListener('change', toggleLanguageFilter);
        }
        
        // Focus search box
        const searchBox = document.querySelector('input[name="q"]');
        if (searchBox && !searchBox.value) {
            searchBox.focus();
        }
    });
</script>
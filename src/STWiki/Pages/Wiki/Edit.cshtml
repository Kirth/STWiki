@page "{slug?}"
@model STWiki.Pages.Wiki.EditModel
@{
    ViewData["Title"] = Model.IsNew ? "Create New Page" : $"Edit {Model.Title}";
}

<div class="container-fluid px-4">
    <form method="post" class="mb-4" id="edit-form" asp-route-slug="@Model.OriginalSlug">
        <!-- Clean Header Section -->
        <div class="edit-header rounded-3 shadow-sm border p-4 mb-4">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="mb-3">
                        <label class="form-label fw-semibold text-secondary mb-2">
                            <i class="bi bi-pencil-square me-1"></i>
                            @(Model.IsNew ? "New Wiki Page" : "Edit Page")
                        </label>
                        <input asp-for="Title" class="form-control form-control-lg border-0 bg-light" 
                               placeholder="@(Model.IsNew ? "Enter page title..." : "Page Title")" 
                               style="font-size: 1.25rem; font-weight: 600;" />
                        <span asp-validation-for="Title" class="text-danger small"></span>
                    </div>
                </div>
                
                <div class="col-md-4 text-end">
                    <div class="d-flex gap-2 justify-content-end flex-wrap">
                        <button type="submit" class="btn btn-primary px-4 @(Model.IsLocked ? "disabled" : "")" 
                                @(Model.IsLocked ? "disabled" : "")>
                            <i class="bi bi-save me-1"></i>
                            @(Model.IsNew ? "Create" : "Save")
                        </button>
                        
                        @if (!Model.IsNew)
                        {
                            <button type="button" class="btn btn-outline-@(Model.IsLocked ? "success" : "warning")" 
                                    onclick="submitLockForm('@(Model.IsLocked ? "Unlock this page?" : "Lock this page?")')">
                                <i class="bi bi-@(Model.IsLocked ? "unlock" : "lock") me-1"></i>
                                @(Model.IsLocked ? "Unlock" : "Lock")
                            </button>
                            
                            <a asp-page="/Wiki/View" asp-route-slug="@Model.OriginalSlug" class="btn btn-outline-secondary">
                                <i class="bi bi-x-lg me-1"></i> Cancel
                            </a>
                        }
                        else
                        {
                            <a asp-page="/Wiki/Index" class="btn btn-outline-secondary">
                                <i class="bi bi-x-lg me-1"></i> Cancel
                            </a>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Page Metadata -->
            @if (!Model.IsNew)
            {
                <div class="row mt-3 pt-3 border-top">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center text-muted small">
                            <span class="me-4">
                                <i class="bi bi-calendar-plus text-success me-1"></i>
                                Created @Model.CreatedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                            </span>
                            <span class="me-4">
                                <i class="bi bi-clock-history text-primary me-1"></i>
                                Updated @Model.UpdatedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                            </span>
                            <span>
                                <i class="bi bi-person text-info me-1"></i>
                                by @if (Model.UpdatedByUser != null)
                                {
                                    @Html.UserLink(Model.UpdatedByUser)
                                }
                                else
                                {
                                    @Html.UserLink(Model.UpdatedBy, Model.UpdatedBy ?? "Unknown")
                                }
                            </span>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <a asp-page="/Wiki/History" asp-route-slug="@Model.OriginalSlug" class="btn btn-outline-info btn-sm">
                            <i class="bi bi-clock-history me-1"></i>
                            History
                        </a>
                    </div>
                </div>
            }
        </div>

    @* Draft Status Indicator - Enhanced *@
    @if (Model.HasDraft && !Model.IsNew)
    {
        <div class="alert alert-warning alert-dismissible fade show shadow" role="alert" id="draft-indicator" style="border-left: 5px solid #fd7e14;">
            <div class="d-flex align-items-start justify-content-between">
                <div class="d-flex align-items-start">
                    <i class="bi bi-exclamation-triangle-fill text-warning me-3 mt-1" style="font-size: 1.5rem;"></i>
                    <div>
                        <h5 class="alert-heading mb-2">üìù Unsaved Draft Found!</h5>
                        <p class="mb-2">You have unsaved changes from a previous editing session.</p>
                        <div class="small text-muted">
                            <strong>Draft saved:</strong> @if(Model.LastDraftAt.HasValue) { <text>@Model.LastDraftAt.Value.ToString("MMM dd, yyyy 'at' HH:mm")</text> }
                            @if(Model.LastCommittedAt.HasValue) { <br/><strong>Last published:</strong> <text>@Model.LastCommittedAt.Value.ToString("MMM dd, yyyy 'at' HH:mm")</text> }
                        </div>
                        <div class="mt-3">
                            <strong>What would you like to do?</strong>
                            <div class="d-flex gap-2 mt-2">
                                <button type="button" class="btn btn-sm btn-success" onclick="acceptDraft()">
                                    <i class="bi bi-check-circle me-1"></i>Continue with Draft
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="discardDraft()">
                                    <i class="bi bi-trash me-1"></i>Discard Draft & Start Fresh
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="hideDraftPrompt()">
                                    <i class="bi bi-eye-slash me-1"></i>Hide This Message
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <div asp-validation-summary="All"></div>
        </div>
    }
    
    @if (ViewData["IsPageLocked"] != null)
    {
        <div class="alert alert-warning d-flex align-items-center">
            <i class="bi bi-lock-fill text-warning me-2"></i>
            <div class="flex-grow-1">
                <strong>Page Locked:</strong> @ViewData["LockWarning"]
            </div>
        </div>
    }
    
    @if (TempData["StatusMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["StatusMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

        <!-- Hidden fields to track slug information -->
        @if (!Model.IsNew)
        {
            <input type="hidden" asp-for="OriginalSlug" />
        }
        <input type="hidden" asp-for="ParentSlugPath" />
        <input type="hidden" asp-for="PageSlugSegment" />
        
        <div class="row g-4">
            <!-- Main Content Area -->
            <div class="col-12">
                <!-- Editor Section -->
                <div class="card mb-4">
                    <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-file-text text-primary me-2"></i>
                            Content Editor
                        </h6>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-primary px-3">@Model.BodyFormat.ToUpperInvariant()</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="editor-container">
                            <component type="typeof(STWiki.Components.EditorSimple)" 
                                       render-mode="Server"
                                       param-PageId="@(Model.PageId ?? Guid.Empty)"
                                       param-InitialContentRaw="@Model.Body"
                                       param-YjsRoomRaw="@(Model.Slug ?? "new-page")"
                                       param-BodyFormat="@Model.BodyFormat"
                                       param-HasDraft="@Model.HasDraft"
                                       param-LastDraftAt="@Model.LastDraftAt"
                                       param-LastCommittedAt="@Model.LastCommittedAt" />
                        </div>
                        <textarea asp-for="Body" class="form-control d-none" rows="20" id="body-textarea">@Model.Body</textarea>
                        <span asp-validation-for="Body" class="text-danger"></span>
                    </div>
                </div>

                <!-- URL Configuration -->
                <div class="card mb-4">
                    <div class="card-header bg-light border-0">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-link-45deg text-primary me-2"></i>
                            Page Settings
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                @if (Model.IsNew)
                                {
                                    <label asp-for="Slug" class="form-label fw-medium">Page Name</label>
                                    @if (!string.IsNullOrEmpty(Model.ParentSlugPath))
                                    {
                                        <div class="input-group">
                                            <span class="input-group-text bg-light text-muted">@Model.ParentSlugPath/</span>
                                            <input asp-for="Slug" class="form-control" placeholder="auto-generated-from-title" />
                                        </div>
                                    }
                                    else
                                    {
                                        <input asp-for="Slug" class="form-control" placeholder="auto-generated-from-title" />
                                    }
                                    <div class="form-text">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Enter just the page name. Leave blank to auto-generate from title.
                                    </div>
                                    <span asp-validation-for="Slug" class="text-danger small"></span>
                                }
                                else
                                {
                                    <label asp-for="Slug" class="form-label fw-medium">Page Name</label>
                                    @if (!string.IsNullOrEmpty(Model.ParentSlugPath))
                                    {
                                        <div class="input-group">
                                            <span class="input-group-text bg-light text-muted">@Model.ParentSlugPath/</span>
                                            <input asp-for="Slug" class="form-control" />
                                        </div>
                                        <div class="form-text">
                                            <i class="bi bi-arrow-repeat text-success me-1"></i>
                                            Edit just the page name. Full URL: <code>@Model.ParentSlugPath/@Model.Slug</code>
                                        </div>
                                    }
                                    else
                                    {
                                        <input asp-for="Slug" class="form-control" />
                                        <div class="form-text">
                                            <i class="bi bi-arrow-repeat text-success me-1"></i>
                                            This is a top-level page. Changing the name will create an automatic redirect.
                                        </div>
                                    }
                                    <span asp-validation-for="Slug" class="text-danger small"></span>
                                }
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Summary" class="form-label fw-medium">Summary <span class="text-muted">(Optional)</span></label>
                                <input asp-for="Summary" class="form-control" placeholder="Brief description of this page..." />
                                <div class="form-text">
                                    <i class="bi bi-chat-left-text me-1"></i>
                                    Short description for search results and previews
                                </div>
                                <span asp-validation-for="Summary" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Format Options -->
                <div class="card">
                    <div class="card-header bg-light border-0">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-code-slash text-primary me-2"></i>
                            Format Options
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-flex gap-2 align-items-center">
                            <span class="text-muted small">Switch format:</span>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="switch-to-html-btn" 
                                    style="display: @(Model.BodyFormat == "markdown" ? "inline-block" : "none");">
                                <i class="bi bi-code-slash me-1"></i> HTML
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="switch-to-markdown-btn"
                                    style="display: @(Model.BodyFormat == "markdown" ? "none" : "inline-block");">
                                <i class="bi bi-markdown me-1"></i> Markdown
                            </button>
                        </div>
                    
                    <!-- Hidden format conversion options -->
                    <div id="format-conversion-options" class="mt-2 p-3 border rounded bg-light" style="display: none;">
                        <h6 class="text-primary mb-2">Format Conversion Options</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="conversionOption" id="convert-content" value="convert" checked>
                            <label class="form-check-label" for="convert-content">
                                <strong>Convert content automatically</strong>
                                <div class="form-text" id="conversion-description">
                                    <!-- Description will be set by JavaScript -->
                                </div>
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="conversionOption" id="keep-as-is" value="keep">
                            <label class="form-check-label" for="keep-as-is">
                                <strong>Keep content as-is (no translation)</strong>
                                <div class="form-text">Content will be switched to new format without any conversion</div>
                            </label>
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn btn-primary btn-sm" id="confirm-format-switch">
                                <i class="bi bi-check-circle"></i> Confirm Format Switch
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm ms-2" id="cancel-format-switch">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                        <div class="alert alert-warning mt-2 mb-0">
                            <small><i class="bi bi-exclamation-triangle"></i> 
                            <strong>Warning:</strong> Converting between formats may result in some formatting loss. Consider making a backup of your content first.</small>
                        </div>
                    </div>
                    
                    <!-- Hidden select for form submission -->
                    <select asp-for="BodyFormat" class="form-select" style="display: none;">
                        <option value="markdown">Markdown</option>
                        <option value="html">HTML</option>
                    </select>
                    <span asp-validation-for="BodyFormat" class="text-danger"></span>
                </div>
            </div>
        </div>
    </form>
    
    <!-- Separate lock form to avoid nesting -->
    @if (!Model.IsNew)
    {
        <form method="post" asp-page-handler="ToggleLock" asp-route-slug="@Model.OriginalSlug" id="lock-form" style="display: none;">
        </form>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="_framework/blazor.server.js"></script>
    
    <!-- Prism.js Syntax Highlighting - Local Files -->
    <link href="~/lib/prism/prism.min.css" rel="stylesheet" />
    <script src="~/lib/prism/prism.min.js"></script>
    <!-- Essential Languages Only -->
    <script src="~/lib/prism/prism-javascript.min.js"></script>
    <script src="~/lib/prism/prism-python.min.js"></script>
    <script src="~/lib/prism/prism-csharp.min.js"></script>
    <script src="~/lib/prism/prism-css.min.js"></script>
    <script src="~/lib/prism/prism-html.min.js"></script>
    <script src="~/lib/prism/prism-json.min.js"></script>
    <script src="~/lib/prism/prism-sql.min.js"></script>
    <script src="~/lib/prism/prism-bash.min.js"></script>
    
    <!-- New modular editor system -->
    <script type="module" src="~/js/wiki-editor.js"></script>
    <script type="module" src="~/js/wiki-editor-blazor-bridge.js"></script>
    <script src="~/js/media-library.js"></script>
    
    <!-- Page-specific functionality (extracted from inline scripts) -->
    <script src="~/js/blazor-diagnostics.js"></script>
    <script src="~/js/format-switching.js"></script>
    <script src="~/js/fallback-drag-drop.js"></script>
    <script src="~/js/editor-button-handlers.js"></script>
    <script src="~/js/form-sync.js"></script>
    <script src="~/js/dom-traps.js"></script>
    <script src="~/js/draft-management.js"></script>
    <script src="~/js/page-lock.js"></script>
    
    <!-- Initialize draft management with page ID -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize draft management if available
            if (typeof initializeDraftManagement === 'function') {
                initializeDraftManagement('@Model.PageId');
            }
        });
    </script>
    
    
    <script src="~/js/editor-enhanced.js"></script>
    
    <script>
            // Handle EditorSimple button clicks via event delegation
            document.addEventListener('click', function(e) {
                const button = e.target.closest('button[data-action]');
                if (!button || button.disabled) {
                    console.log('Button click ignored - no action or disabled:', button);
                    return;
                }
                
                const action = button.dataset.action;
                console.log('üîò Button clicked with action:', action);
                
                const editorContainer = button.closest('.editor-container');
                if (!editorContainer) {
                    console.error('Editor container not found');
                    return;
                }
                
                // Find the .NET component reference (set by initEnhancedEditor)
                const componentRef = editorContainer._blazorComponentRef;
                if (!componentRef) {
                    console.error('EditorSimple component reference not found');
                    return;
                }
                
                console.log('üöÄ Calling .NET method for action:', action);
                
                // Call the appropriate .NET method
                switch (action) {
                    case 'save-draft':
                        componentRef.invokeMethodAsync('HandleSaveDraft')
                            .then(() => console.log('‚úÖ HandleSaveDraft completed'))
                            .catch(err => console.error('‚ùå HandleSaveDraft failed:', err));
                        break;
                    case 'commit-changes':
                        componentRef.invokeMethodAsync('HandleCommitChanges')
                            .then(() => console.log('‚úÖ HandleCommitChanges completed'))
                            .catch(err => console.error('‚ùå HandleCommitChanges failed:', err));
                        break;
                    case 'insert-bold':
                        componentRef.invokeMethodAsync('HandleInsertBold')
                            .then(() => console.log('‚úÖ HandleInsertBold completed'))
                            .catch(err => console.error('‚ùå HandleInsertBold failed:', err));
                        break;
                    default:
                        console.warn('Unknown action:', action);
                }
            });
        </script>
        <script>
            // Disable default browser form change warnings and handle them ourselves
            document.addEventListener('DOMContentLoaded', function() {
                // Remove any default form change tracking that browsers might add
                const form = document.querySelector('#edit-form');
                if (form) {
                    // Reset form dirty state after initial load to prevent browser warnings
                    // when no actual changes have been made
                    setTimeout(() => {
                        // Reset all form elements to prevent browser from thinking they're "dirty"
                        const inputs = form.querySelectorAll('input, textarea, select');
                        inputs.forEach(input => {
                            if (input.type !== 'submit' && input.type !== 'button') {
                                input.defaultValue = input.value;
                            }
                        });
                        console.log('üîß Reset form dirty state to prevent unnecessary warnings');
                    }, 100);
                }
            });
            
            // Sync editor content with hidden textarea on form submission  
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.querySelector('form');
                if (form) {
                    form.addEventListener('submit', function(e) {
                        try {
                            console.log('üîÑ Form submission detected, syncing editor content...');
                            
                            // Mark content as saved before form submission to prevent leave warning
                            if (typeof markContentAsSaved === 'function') {
                                markContentAsSaved();
                                console.log('üíæ Marked content as saved before form submit');
                            }
                            
                            const bodyTextarea = document.getElementById('body-textarea');
                            if (!bodyTextarea) {
                                console.error('‚ùå Body textarea not found');
                                return;
                            }
                            
                            console.log('üìã Current body textarea value before sync:', bodyTextarea.value.length, 'characters');
                            
                            // Try multiple methods to find the active editor content
                            let editorContent = '';
                            let syncMethod = '';
                            
                            // Method 1: Look for enhanced editor textarea in editor container
                            const editorContainer = document.querySelector('.editor-container');
                            if (editorContainer) {
                                // Try various selectors for the editor textarea
                                const selectors = [
                                    'textarea[id*="simple-editor-"]',
                                    'textarea[id*="editor-"]', 
                                    'textarea.enhanced-editor',
                                    'textarea:not(#body-textarea)',
                                    'textarea'
                                ];
                                
                                for (const selector of selectors) {
                                    const activeEditor = editorContainer.querySelector(selector);
                                    if (activeEditor && activeEditor.id !== 'body-textarea') {
                                        editorContent = activeEditor.value || '';
                                        syncMethod = `container selector: ${selector}`;
                                        break;
                                    }
                                }
                            }
                            
                            // Method 2: Use the enhanced editor global function if available
                            if (!editorContent && typeof getEnhancedEditorContent === 'function') {
                                // Try to find any editor instance
                                const editorTextareas = document.querySelectorAll('textarea:not(#body-textarea)');
                                for (const textarea of editorTextareas) {
                                    if (textarea.id && textarea.id.includes('editor')) {
                                        editorContent = getEnhancedEditorContent(textarea.id) || '';
                                        syncMethod = `global function: ${textarea.id}`;
                                        break;
                                    }
                                }
                            }
                            
                            // Method 3: Try to get content from any visible textarea that's not the hidden one
                            if (!editorContent) {
                                const visibleTextareas = Array.from(document.querySelectorAll('textarea:not(#body-textarea)'))
                                    .filter(ta => ta.offsetParent !== null && ta.value && ta.value.trim());
                                    
                                if (visibleTextareas.length > 0) {
                                    editorContent = visibleTextareas[0].value;
                                    syncMethod = `visible textarea: ${visibleTextareas[0].id || 'unnamed'}`;
                                }
                            }
                            
                            // Update the form textarea
                            if (editorContent) {
                                bodyTextarea.value = editorContent;
                                console.log(`‚úÖ Synced editor content to form textarea (${syncMethod}):`, editorContent.length, 'characters');
                            } else {
                                console.warn('‚ö†Ô∏è No editor content found to sync, form textarea remains:', bodyTextarea.value.length, 'characters');
                                
                                // Debug: list all textareas
                                const allTextareas = document.querySelectorAll('textarea');
                                console.log('üìã All textareas found:', Array.from(allTextareas).map(ta => ({
                                    id: ta.id,
                                    className: ta.className,
                                    visible: ta.offsetParent !== null,
                                    contentLength: ta.value?.length || 0
                                })));
                            }
                        } catch (error) {
                            console.error('‚ùå Error syncing editor content:', error);
                        }
                    });
                }
            });
            
            // Function called when Blazor editor commits changes
            window.markContentAsCommitted = function() {
                console.log('üìù Content committed via API - updating form button');
                
                const saveButton = document.querySelector('button[type="submit"]');
                if (saveButton) {
                    // Change button text to indicate content was already saved
                    const originalText = saveButton.textContent;
                    saveButton.textContent = 'Already Saved via Editor';
                    saveButton.classList.add('btn-secondary');
                    saveButton.classList.remove('btn-success');
                    
                    // Add warning class to form to indicate potential conflict
                    const form = document.querySelector('form');
                    if (form) {
                        form.style.border = '2px solid orange';
                        form.style.borderRadius = '5px';
                        form.style.padding = '10px';
                        
                        // Add warning message if not already present
                        let warningDiv = document.getElementById('commit-warning');
                        if (!warningDiv) {
                            warningDiv = document.createElement('div');
                            warningDiv.id = 'commit-warning';
                            warningDiv.className = 'alert alert-warning';
                            warningDiv.innerHTML = '<strong>‚ö†Ô∏è Content already saved!</strong> You used "Commit Changes" in the editor. Using "Save Changes" again may overwrite your API changes.';
                            form.insertBefore(warningDiv, form.firstChild);
                        }
                    }
                    
                    // Restore button after 10 seconds
                    setTimeout(() => {
                        saveButton.textContent = originalText;
                        saveButton.classList.remove('btn-secondary');
                        saveButton.classList.add('btn-success');
                    }, 10000);
                }
            };
        </script>
        <script>
            // DOM trap script - runs after Blazor initialization
            (function(){
                console.log('üîß Installing DOM operation traps...');
                
                function hexify(s){
                    if (typeof s !== "string") return s;
                    return [...s].map(c => `U+${c.codePointAt(0).toString(16).toUpperCase().padStart(4,'0')}(${c})`).join(' ');
                }
                function logFail(kind, obj){
                    const pretty = {};
                    for (const [k,v] of Object.entries(obj)) pretty[k] = typeof v === 'string' ? `${v}  [${hexify(v)}]` : v;
                    console.error(`[trap] ${kind} failed`, pretty);
                    
                    // Also log Blazor state when errors occur
                    if (window.blazorDiagnostics) {
                        console.error('[trap] Blazor state at failure:', window.blazorDiagnostics.logBlazorState());
                    }
                }

                const _sa  = Element.prototype.setAttribute;
                Element.prototype.setAttribute = function(name, value){
                    try { return _sa.call(this, name, value); }
                    catch(e){ logFail('setAttribute', {el:this, name, value, e}); throw e; }
                };

                const _sans = Element.prototype.setAttributeNS;
                Element.prototype.setAttributeNS = function(ns, name, value){
                    try { return _sans.call(this, ns, name, value); }
                    catch(e){ logFail('setAttributeNS', {el:this, ns, name, value, e}); throw e; }
                };

                const _ca = Document.prototype.createAttribute;
                Document.prototype.createAttribute = function(name){
                    try { return _ca.call(this, name); }
                    catch(e){ logFail('createAttribute', {name, e}); throw e; }
                };

                const _ce = Document.prototype.createElement;
                Document.prototype.createElement = function(name){
                    try { return _ce.call(this, name); }
                    catch(e){ logFail('createElement', {name, e}); throw e; }
                };

                const _cc = Document.prototype.createComment;
                Document.prototype.createComment = function(data){
                    try { return _cc.call(this, data); }
                    catch(e){ logFail('createComment', {data, e}); throw e; }
                };

                const _add = DOMTokenList.prototype.add;
                DOMTokenList.prototype.add = function(...tokens){
                    try { return _add.apply(this, tokens); }
                    catch(e){ logFail('classList.add', {el:this, tokens: tokens.map(t => `${t}  [${hexify(t)}]`), e}); throw e; }
                };

                // Optional: catch innerHTML too (invalid markup can also throw)
                const _inner = Object.getOwnPropertyDescriptor(Element.prototype, "innerHTML");
                Object.defineProperty(Element.prototype, "innerHTML", {
                    set(html){ try { return _inner.set.call(this, html); }
                        catch(e){ logFail('innerHTML', {el:this, html, e}); throw e; } },
                    get(){ return _inner.get.call(this); }
                });

                window.addEventListener('error', ev => console.error('[trap] window.error', ev.error || ev));
                window.addEventListener('unhandledrejection', ev => console.error('[trap] unhandledrejection', ev.reason || ev));
                
                console.log('‚úÖ DOM operation traps installed');
            })();
        </script>
        
    <style>
            /* Prism.js Code Block Enhancements */
            .markdown-content pre[class*="language-"] {
                margin: 1.5em 0;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                overflow-x: auto;
                font-size: 14px;
                line-height: 1.5;
            }
        </style>
        <link href="~/css/edit-page.css" rel="stylesheet" />

        <!-- Collaborative Editing Scripts -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
        <script src="~/js/editor-collab.js"></script>
        <script>
            // Initialize collaborative editing
            document.addEventListener('DOMContentLoaded', function() {
                @if (!Model.IsNew && Model.PageId.HasValue)
                {
                    <text>
                    const pageId = '@Model.PageId.Value';
                    const clientId = '@Guid.NewGuid()';
                    const userName = '@(User.Identity?.Name ?? "Anonymous")';
                    
                    // Initialize collaborative client
                    console.log('üöÄ Initializing collaborative editing for existing page:', pageId);
                    window.collabClient = new CollabClient(pageId, clientId, userName);
                    
                    // Add global debugging function
                    window.debugCollab = function() {
                        console.log('=== COLLABORATION DEBUG INFO ===');
                        console.log('Page ID:', pageId);
                        console.log('Client ID:', clientId);
                        console.log('User:', userName);
                        console.log('CollabClient exists:', !!window.collabClient);
                        console.log('CollabClient connected:', window.collabClient?.isConnected);
                        console.log('WikiEditor instances:', Array.from(window.wikiEditors?.keys() || []));
                        console.log('WikiEditor collaboration plugin:', !!window.wikiEditorCollabPlugin);
                        if (window.wikiEditorCollabPlugin) {
                            console.log('WikiEditor current content preview:', 
                                window.wikiEditorCollabPlugin.editor.value.substring(0, 100) + '...');
                        }
                        console.log('Pending initial content:', !!pendingInitialContent);
                        console.log('=== END DEBUG INFO ===');
                    };
                    
                    // Variable to track if we need to apply initial collaborative content
                    let pendingInitialContent = null;
                    
                    // Add collaborative status indicator with retry mechanism
                    function addCollaborativeStatus() {
                        console.log('üîç Looking for .editor-status container...');
                        const statusContainer = document.querySelector('.editor-status');
                        console.log('üîç Found statusContainer:', statusContainer);
                        
                        if (statusContainer) {
                            const collabStatus = document.createElement('span');
                            collabStatus.className = 'badge bg-secondary';
                            collabStatus.id = 'collab-status';
                            collabStatus.innerHTML = '<i class="bi bi-wifi me-1"></i>Connecting...';
                            statusContainer.appendChild(collabStatus);
                            console.log('‚úÖ Added collaborative status badge');
                            return true;
                        }
                        return false;
                    }
                    
                    // Try immediately, then retry if needed
                    if (!addCollaborativeStatus()) {
                        console.log('‚è≥ Retrying status container in 500ms...');
                        setTimeout(() => {
                            if (!addCollaborativeStatus()) {
                                console.log('‚è≥ Retrying status container in 1000ms...');
                                setTimeout(addCollaborativeStatus, 1000);
                            }
                        }, 500);
                    }
                    
                    // Add collaborative mode toggle
                    function addCollaborativeModeToggle() {
                        const toolbar = document.querySelector('.editor-toolbar .btn-group');
                        if (toolbar) {
                            const toggleBtn = document.createElement('button');
                            toggleBtn.type = 'button';
                            toggleBtn.className = 'btn btn-outline-info btn-sm';
                            toggleBtn.id = 'collab-mode-toggle';
                            toggleBtn.innerHTML = '<i class="bi bi-people me-1"></i>Collaborative Mode';
                            toggleBtn.title = 'Toggle between single-user and collaborative editing';
                            
                            toolbar.appendChild(toggleBtn);
                            
                            // Add test button for debugging
                            const testBtn = document.createElement('button');
                            testBtn.type = 'button';
                            testBtn.className = 'btn btn-outline-warning btn-sm';
                            testBtn.innerHTML = '<i class="bi bi-bug me-1"></i>Test Update';
                            testBtn.title = 'Send test collaborative update';
                            testBtn.addEventListener('click', async () => {
                                console.log('üß™ Running comprehensive collaborative test...');
                                try {
                                    await window.collabClient.testPushMethod();
                                } catch (error) {
                                    console.error('‚ùå Comprehensive test failed:', error);
                                }
                            });
                            
                            toolbar.appendChild(testBtn);
                            
                            // Toggle functionality
                            let isCollaborativeMode = true; // Start in collaborative mode
                            
                            toggleBtn.addEventListener('click', () => {
                                isCollaborativeMode = !isCollaborativeMode;
                                
                                if (isCollaborativeMode) {
                                    toggleBtn.innerHTML = '<i class="bi bi-people me-1"></i>Collaborative Mode';
                                    toggleBtn.className = 'btn btn-outline-info btn-sm';
                                    console.log('ü§ù Switched to collaborative mode');
                                    
                                    // Re-enable collaborative features
                                    setupCollaborativeIntegration();
                                } else {
                                    toggleBtn.innerHTML = '<i class="bi bi-person me-1"></i>Single User Mode';
                                    toggleBtn.className = 'btn btn-outline-secondary btn-sm';
                                    console.log('üë§ Switched to single-user mode');
                                }
                            });
                            
                            console.log('‚úÖ Added collaborative mode toggle');
                            return true;
                        }
                        return false;
                    }
                    
                    // Add the toggle with retry
                    setTimeout(() => {
                        if (!addCollaborativeModeToggle()) {
                            setTimeout(addCollaborativeModeToggle, 1000);
                        }
                    }, 500);
                    
                    // Handle connection events
                    window.collabClient.on('connected', () => {
                        const status = document.getElementById('collab-status');
                        if (status) {
                            status.className = 'badge bg-success';
                            status.innerHTML = '<i class="bi bi-wifi me-1"></i>Collaborative';
                        }
                        console.log('üì° Collaborative editing connected');
                    });
                    
                    window.collabClient.on('disconnected', () => {
                        const status = document.getElementById('collab-status');
                        if (status) {
                            status.className = 'badge bg-danger';
                            status.innerHTML = '<i class="bi bi-wifi-off me-1"></i>Disconnected';
                        }
                        console.log('üì° Collaborative editing disconnected');
                    });
                    
                    window.collabClient.on('reconnecting', () => {
                        const status = document.getElementById('collab-status');
                        if (status) {
                            status.className = 'badge bg-warning';
                            status.innerHTML = '<i class="bi bi-wifi me-1"></i>Reconnecting...';
                        }
                        console.log('üì° Collaborative editing reconnecting...');
                    });
                    
                    window.collabClient.on('error', (error) => {
                        console.error('üì° Collaborative editing error:', error);
                        const status = document.getElementById('collab-status');
                        if (status) {
                            status.className = 'badge bg-danger';
                            status.innerHTML = '<i class="bi bi-wifi-off me-1"></i>Error';
                        }
                    });
                    
                    // Initialize with current content
                    window.collabClient.on('initialized', () => {
                        console.log('üì° Collaborative editing initialized');
                        // If no collaborative content exists, initialize with current page content
                        if (window.collabClient.blocks.length === 0) {
                            const bodyTextarea = document.getElementById('body-textarea');
                            if (bodyTextarea && bodyTextarea.value) {
                                window.collabClient.fromMarkdown(bodyTextarea.value);
                            }
                        }
                        
                        // Hook into WikiEditor collaboration system
                        setupWikiEditorCollaboration();
                    });
                    
                    // Function to integrate with WikiEditor collaboration plugin
                    function setupWikiEditorCollaboration() {
                        console.log('üîó Setting up WikiEditor collaboration integration...');
                        
                        // Find the WikiEditor instance (retry if not ready)
                        const editorContainer = document.querySelector('[data-editor-id]');
                        if (!editorContainer) {
                            console.log('‚è≥ WikiEditor container not found, retrying in 500ms...');
                            setTimeout(setupWikiEditorCollaboration, 500);
                            return;
                        }
                        
                        const editorId = editorContainer.getAttribute('data-editor-id');
                        const containerId = `editor-container-${editorId}`;
                        console.log('üîç Found WikiEditor container:', containerId);
                        
                        // Get the editor instance from global registry
                        const editorInstance = window.wikiEditors?.get(containerId);
                        if (!editorInstance || !editorInstance.collabPlugin) {
                            console.log('‚è≥ WikiEditor instance or collaboration plugin not ready, retrying in 500ms...');
                            setTimeout(setupWikiEditorCollaboration, 500);
                            return;
                        }
                        
                        console.log('‚úÖ WikiEditor collaboration plugin found:', editorInstance.collabPlugin);
                        
                        // Store reference for easier access
                        window.wikiEditorCollabPlugin = editorInstance.collabPlugin;
                        
                        // Apply any pending initial content that was processed before WikiEditor was ready
                        if (pendingInitialContent) {
                            console.log('üìù Applying pending initial collaborative content to WikiEditor');
                            window.wikiEditorCollabPlugin.applyRemoteUpdate(pendingInitialContent);
                            
                            // Sync to hidden textarea
                            const hiddenTextarea = document.querySelector('#body-textarea') || 
                                                 document.querySelector('textarea[name="Body"]');
                            if (hiddenTextarea) {
                                hiddenTextarea.value = pendingInitialContent;
                                console.log('üîÑ Synced initial collaborative content to hidden textarea');
                            }
                            
                            pendingInitialContent = null;
                        }
                        
                        console.log('‚úÖ WikiEditor collaboration integration complete');
                    }
                    
                    // Handle content changes from other users (including initial content)
                    window.collabClient.on('content_change', (newContent) => {
                        console.log('üì• Received content change:', newContent.substring(0, 50) + '...');
                        
                        // Apply update through WikiEditor collaboration plugin if ready
                        if (window.wikiEditorCollabPlugin) {
                            window.wikiEditorCollabPlugin.applyRemoteUpdate(newContent);
                            
                            // Also sync to hidden textarea for form submission
                            const hiddenTextarea = document.querySelector('#body-textarea') || 
                                                 document.querySelector('textarea[name="Body"]');
                            if (hiddenTextarea) {
                                hiddenTextarea.value = newContent;
                                console.log('üîÑ Synced content to hidden textarea for form submission');
                            }
                        } else {
                            // WikiEditor not ready yet - store content to apply later
                            console.log('‚è≥ WikiEditor not ready, storing content for later application');
                            pendingInitialContent = newContent;
                        }
                    });
                    
                    // Handle generic updates (for debugging)
                    window.collabClient.on('update', () => {
                        console.log('üì• Received generic update from collaborative system');
                    });
                    
                    // Handle commit button for collaborative editing
                    const commitButton = document.querySelector('[data-action="commit-changes"]');
                    if (commitButton) {
                        commitButton.addEventListener('click', async (e) => {
                            e.preventDefault();
                            try {
                                const commitMessage = prompt('Enter commit message:') || 'Updated content';
                                const revisionId = await window.collabClient.commit(commitMessage);
                                if (revisionId) {
                                    alert('Changes committed successfully!');
                                    // Optionally redirect to view page
                                    window.location.href = '/wiki/@Model.Slug';
                                }
                            } catch (error) {
                                console.error('Failed to commit:', error);
                                alert('Failed to commit changes: ' + error.message);
                            }
                        });
                    }
                    </text>
                }
            });
        </script>
}

<!-- Upload Modal for Drag & Drop Integration -->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">Upload Media Files</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Drag and Drop Zone -->
                <div id="dropzone" class="border-2 border-dashed border-secondary rounded p-5 text-center mb-3">
                    <i class="bi bi-cloud-upload display-4 text-muted mb-3 d-block"></i>
                    <h5>Drag and drop files here</h5>
                    <p class="text-muted">or click to browse files</p>
                    <input type="file" id="fileInput" multiple class="form-control" style="display: none;" accept="image/*,.pdf,.txt,.md,.docx,.pptx">
                    <button type="button" class="btn btn-outline-primary" onclick="document.getElementById('fileInput').click()">
                        Choose Files
                    </button>
                </div>

                <!-- Upload Progress -->
                <div id="uploadProgress" style="display: none;">
                    <div class="progress mb-3">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <div id="uploadStatus" class="text-center"></div>
                </div>

                <!-- File List -->
                <div id="fileList"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="uploadBtn" onclick="mediaLibrary.uploadFiles()" disabled>
                    Upload Files
                </button>
            </div>
        </div>
    </div>
</div>


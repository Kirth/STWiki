@page "{slug?}"
@model STWiki.Pages.Wiki.EditModel
@{
    ViewData["Title"] = Model.IsNew ? "Create New Page" : $"Edit {Model.Title}";
}

<div class="container-fluid px-4">
    <form method="post" class="mb-4" id="edit-form" asp-route-slug="@Model.OriginalSlug">
        <!-- Clean Header Section -->
        <div class="edit-header bg-white rounded-3 shadow-sm border p-4 mb-4">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="mb-3">
                        <label class="form-label fw-semibold text-secondary mb-2">
                            <i class="bi bi-pencil-square me-1"></i>
                            @(Model.IsNew ? "New Wiki Page" : "Edit Page")
                        </label>
                        <input asp-for="Title" class="form-control form-control-lg border-0 bg-light" 
                               placeholder="@(Model.IsNew ? "Enter page title..." : "Page Title")" 
                               style="font-size: 1.25rem; font-weight: 600;" />
                        <span asp-validation-for="Title" class="text-danger small"></span>
                    </div>
                </div>
                
                <div class="col-md-4 text-end">
                    <div class="d-flex gap-2 justify-content-end flex-wrap">
                        <button type="submit" class="btn btn-primary px-4 @(Model.IsLocked ? "disabled" : "")" 
                                @(Model.IsLocked ? "disabled" : "")>
                            <i class="bi bi-save me-1"></i>
                            @(Model.IsNew ? "Create" : "Save")
                        </button>
                        
                        @if (!Model.IsNew)
                        {
                            <button type="button" class="btn btn-outline-@(Model.IsLocked ? "success" : "warning")" 
                                    onclick="submitLockForm('@(Model.IsLocked ? "Unlock this page?" : "Lock this page?")')">
                                <i class="bi bi-@(Model.IsLocked ? "unlock" : "lock") me-1"></i>
                                @(Model.IsLocked ? "Unlock" : "Lock")
                            </button>
                            
                            <a asp-page="/Wiki/View" asp-route-slug="@Model.OriginalSlug" class="btn btn-outline-secondary">
                                <i class="bi bi-x-lg me-1"></i> Cancel
                            </a>
                        }
                        else
                        {
                            <a asp-page="/Wiki/Index" class="btn btn-outline-secondary">
                                <i class="bi bi-x-lg me-1"></i> Cancel
                            </a>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Page Metadata -->
            @if (!Model.IsNew)
            {
                <div class="row mt-3 pt-3 border-top">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center text-muted small">
                            <span class="me-4">
                                <i class="bi bi-calendar-plus text-success me-1"></i>
                                Created @Model.CreatedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                            </span>
                            <span class="me-4">
                                <i class="bi bi-clock-history text-primary me-1"></i>
                                Updated @Model.UpdatedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                            </span>
                            <span>
                                <i class="bi bi-person text-info me-1"></i>
                                by @Html.UserLink(Model.UpdatedBy, Model.UpdatedBy ?? "Unknown")
                            </span>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <a asp-page="/Wiki/History" asp-route-slug="@Model.OriginalSlug" class="btn btn-outline-info btn-sm">
                            <i class="bi bi-clock-history me-1"></i>
                            History
                        </a>
                    </div>
                </div>
            }
        </div>

    @if (!ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <div asp-validation-summary="All"></div>
        </div>
    }
    
    @if (ViewData["IsPageLocked"] != null)
    {
        <div class="alert alert-warning d-flex align-items-center">
            <i class="bi bi-lock-fill text-warning me-2"></i>
            <div class="flex-grow-1">
                <strong>Page Locked:</strong> @ViewData["LockWarning"]
            </div>
        </div>
    }
    
    @if (TempData["StatusMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["StatusMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

        <!-- Hidden fields to track slug information -->
        @if (!Model.IsNew)
        {
            <input type="hidden" asp-for="OriginalSlug" />
        }
        <input type="hidden" asp-for="ParentSlugPath" />
        <input type="hidden" asp-for="PageSlugSegment" />
        
        <div class="row g-4">
            <!-- Main Content Area -->
            <div class="col-12">
                <!-- Editor Section -->
                <div class="card mb-4">
                    <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-file-text text-primary me-2"></i>
                            Content Editor
                        </h6>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-primary px-3">@Model.BodyFormat.ToUpperInvariant()</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="editor-container">
                            <component type="typeof(STWiki.Components.EditorSimple)" 
                                       render-mode="Server"
                                       param-PageId="@(Model.PageId ?? Guid.Empty)"
                                       param-InitialContentRaw="@Model.Body"
                                       param-YjsRoomRaw="@(Model.Slug ?? "new-page")"
                                       param-BodyFormat="@Model.BodyFormat" />
                        </div>
                        <textarea asp-for="Body" class="form-control d-none" rows="20" id="body-textarea"></textarea>
                        <span asp-validation-for="Body" class="text-danger"></span>
                    </div>
                </div>

                <!-- URL Configuration -->
                <div class="card mb-4">
                    <div class="card-header bg-light border-0">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-link-45deg text-primary me-2"></i>
                            Page Settings
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                @if (Model.IsNew)
                                {
                                    <label asp-for="Slug" class="form-label fw-medium">Page Name</label>
                                    @if (!string.IsNullOrEmpty(Model.ParentSlugPath))
                                    {
                                        <div class="input-group">
                                            <span class="input-group-text bg-light text-muted">@Model.ParentSlugPath/</span>
                                            <input asp-for="Slug" class="form-control" placeholder="auto-generated-from-title" />
                                        </div>
                                    }
                                    else
                                    {
                                        <input asp-for="Slug" class="form-control" placeholder="auto-generated-from-title" />
                                    }
                                    <div class="form-text">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Enter just the page name. Leave blank to auto-generate from title.
                                    </div>
                                    <span asp-validation-for="Slug" class="text-danger small"></span>
                                }
                                else
                                {
                                    <label asp-for="Slug" class="form-label fw-medium">Page Name</label>
                                    @if (!string.IsNullOrEmpty(Model.ParentSlugPath))
                                    {
                                        <div class="input-group">
                                            <span class="input-group-text bg-light text-muted">@Model.ParentSlugPath/</span>
                                            <input asp-for="Slug" class="form-control" />
                                        </div>
                                        <div class="form-text">
                                            <i class="bi bi-arrow-repeat text-success me-1"></i>
                                            Edit just the page name. Full URL: <code>@Model.ParentSlugPath/@Model.Slug</code>
                                        </div>
                                    }
                                    else
                                    {
                                        <input asp-for="Slug" class="form-control" />
                                        <div class="form-text">
                                            <i class="bi bi-arrow-repeat text-success me-1"></i>
                                            This is a top-level page. Changing the name will create an automatic redirect.
                                        </div>
                                    }
                                    <span asp-validation-for="Slug" class="text-danger small"></span>
                                }
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Summary" class="form-label fw-medium">Summary <span class="text-muted">(Optional)</span></label>
                                <input asp-for="Summary" class="form-control" placeholder="Brief description of this page..." />
                                <div class="form-text">
                                    <i class="bi bi-chat-left-text me-1"></i>
                                    Short description for search results and previews
                                </div>
                                <span asp-validation-for="Summary" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Format Options -->
                <div class="card">
                    <div class="card-header bg-light border-0">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-code-slash text-primary me-2"></i>
                            Format Options
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-flex gap-2 align-items-center">
                            <span class="text-muted small">Switch format:</span>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="switch-to-html-btn" 
                                    style="display: @(Model.BodyFormat == "markdown" ? "inline-block" : "none");">
                                <i class="bi bi-code-slash me-1"></i> HTML
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="switch-to-markdown-btn"
                                    style="display: @(Model.BodyFormat == "markdown" ? "none" : "inline-block");">
                                <i class="bi bi-markdown me-1"></i> Markdown
                            </button>
                        </div>
                    
                    <!-- Hidden format conversion options -->
                    <div id="format-conversion-options" class="mt-2 p-3 border rounded bg-light" style="display: none;">
                        <h6 class="text-primary mb-2">Format Conversion Options</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="conversionOption" id="convert-content" value="convert" checked>
                            <label class="form-check-label" for="convert-content">
                                <strong>Convert content automatically</strong>
                                <div class="form-text" id="conversion-description">
                                    <!-- Description will be set by JavaScript -->
                                </div>
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="conversionOption" id="keep-as-is" value="keep">
                            <label class="form-check-label" for="keep-as-is">
                                <strong>Keep content as-is (no translation)</strong>
                                <div class="form-text">Content will be switched to new format without any conversion</div>
                            </label>
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn btn-primary btn-sm" id="confirm-format-switch">
                                <i class="bi bi-check-circle"></i> Confirm Format Switch
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm ms-2" id="cancel-format-switch">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                        <div class="alert alert-warning mt-2 mb-0">
                            <small><i class="bi bi-exclamation-triangle"></i> 
                            <strong>Warning:</strong> Converting between formats may result in some formatting loss. Consider making a backup of your content first.</small>
                        </div>
                    </div>
                    
                    <!-- Hidden select for form submission -->
                    <select asp-for="BodyFormat" class="form-select" style="display: none;">
                        <option value="markdown">Markdown</option>
                        <option value="html">HTML</option>
                    </select>
                    <span asp-validation-for="BodyFormat" class="text-danger"></span>
                </div>
            </div>
        </div>
    </form>
    
    <!-- Separate lock form to avoid nesting -->
    @if (!Model.IsNew)
    {
        <form method="post" asp-page-handler="ToggleLock" asp-route-slug="@Model.OriginalSlug" id="lock-form" style="display: none;">
        </form>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="_framework/blazor.server.js"></script>
    
    <!-- Prism.js Syntax Highlighting - Local Files -->
    <link href="~/lib/prism/prism.min.css" rel="stylesheet" />
    <script src="~/lib/prism/prism.min.js"></script>
    <!-- Essential Languages Only -->
    <script src="~/lib/prism/prism-javascript.min.js"></script>
    <script src="~/lib/prism/prism-python.min.js"></script>
    <script src="~/lib/prism/prism-csharp.min.js"></script>
    <script src="~/lib/prism/prism-css.min.js"></script>
    <script src="~/lib/prism/prism-html.min.js"></script>
    <script src="~/lib/prism/prism-json.min.js"></script>
    <script src="~/lib/prism/prism-sql.min.js"></script>
    <script src="~/lib/prism/prism-bash.min.js"></script>
    
    <script>
            // Blazor connection diagnostics and state monitoring
            (function() {
                console.log('🔧 Blazor diagnostics: Starting connection monitoring...');
                
                function logBlazorState() {
                    const state = {
                        blazor: typeof Blazor !== 'undefined' ? 'loaded' : 'not loaded',
                        signalR: typeof signalR !== 'undefined' ? 'loaded' : 'not loaded',
                        connection: null,
                        circuit: null,
                        connected: false
                    };
                    
                    if (typeof Blazor !== 'undefined') {
                        try {
                            // Better detection: Blazor is connected if it exists and has handlers
                            // The presence of Blazor object itself usually means it's functional
                            state.circuit = 'available';
                            state.connected = true;
                            
                            // Also check if we can access the internal circuit (optional)
                            if (Blazor.defaultReconnectionHandler) {
                                state.connection = 'with reconnection handler';
                            }
                        } catch (e) {
                            state.circuit = 'error: ' + e.message;
                            state.connected = false;
                        }
                    }
                    
                    console.log('🔧 Blazor State:', state);
                    return state.connected;
                }
                
                // Log initial state
                document.addEventListener('DOMContentLoaded', () => {
                    console.log('🔧 DOM loaded, checking Blazor state...');
                    logBlazorState();
                });
                
                // Monitor Blazor connection events - DON'T call Blazor.start() as it auto-starts
                if (typeof Blazor !== 'undefined') {
                    console.log('✅ Blazor already available');
                    logBlazorState();
                } else {
                    // Blazor not ready yet, wait for it
                    let attempts = 0;
                    const waitForBlazor = setInterval(() => {
                        attempts++;
                        if (typeof Blazor !== 'undefined') {
                            console.log(`✅ Blazor available after ${attempts} attempts`);
                            clearInterval(waitForBlazor);
                            logBlazorState();
                        } else if (attempts > 50) { // 5 seconds max
                            console.error('❌ Blazor failed to load after 5 seconds');
                            clearInterval(waitForBlazor);
                            logBlazorState();
                        }
                    }, 100);
                }
                
                // Add a function for components to check connection
                window.checkBlazorConnection = function() {
                    const isConnected = logBlazorState();
                    console.log('🔗 Connection check requested, result:', isConnected);
                    return isConnected;
                };
                
                window.blazorDiagnostics = { logBlazorState, checkBlazorConnection };
            })();
            
            // Function to submit lock form with confirmation
            function submitLockForm(confirmMessage) {
                if (confirm(confirmMessage)) {
                    document.getElementById('lock-form').submit();
                }
            }
        </script>
    
    <script>
        // Format switching functionality
        document.addEventListener('DOMContentLoaded', function() {
                console.log('🔧 DOM loaded, initializing format switching...');
                
                // Declare variables outside try-catch for proper scope
                let switchToHtmlBtn, switchToMarkdownBtn, formatOptions, confirmBtn, cancelBtn, conversionDescription, bodyFormatSelect;
                let targetFormat = '';
                
                try {
                    switchToHtmlBtn = document.getElementById('switch-to-html-btn');
                    switchToMarkdownBtn = document.getElementById('switch-to-markdown-btn');
                    formatOptions = document.getElementById('format-conversion-options');
                    confirmBtn = document.getElementById('confirm-format-switch');
                    cancelBtn = document.getElementById('cancel-format-switch');
                    conversionDescription = document.getElementById('conversion-description');
                    bodyFormatSelect = document.querySelector('select[name="BodyFormat"]');
                    
                    // Comprehensive debug logging
                    console.log('🔧 Elements found:');
                    console.log('  switchToHtmlBtn:', switchToHtmlBtn, switchToHtmlBtn ? 'visible: ' + getComputedStyle(switchToHtmlBtn).display : 'null');
                    console.log('  switchToMarkdownBtn:', switchToMarkdownBtn, switchToMarkdownBtn ? 'visible: ' + getComputedStyle(switchToMarkdownBtn).display : 'null');
                    console.log('  formatOptions:', formatOptions);
                    console.log('  confirmBtn:', confirmBtn);
                    console.log('  bodyFormatSelect:', bodyFormatSelect, bodyFormatSelect ? 'current value: ' + bodyFormatSelect.value : 'null');
                    
                    // Show conversion options when switching to HTML
                    if (switchToHtmlBtn) {
                        console.log('🔧 Attaching click listener to switchToHtmlBtn');
                        switchToHtmlBtn.addEventListener('click', function(e) {
                            console.log('🔘 HTML button clicked!', e);
                            e.preventDefault();
                            targetFormat = 'html';
                            conversionDescription.textContent = 'Convert Markdown syntax to HTML tags';
                            formatOptions.style.display = 'block';
                            this.style.display = 'none';
                        });
                        
                        // Test click programmatically
                        console.log('🧪 Testing HTML button click programmatically...');
                    } else {
                        console.warn('⚠️ switchToHtmlBtn not found');
                    }
                    
                    // Show conversion options when switching to Markdown
                    if (switchToMarkdownBtn) {
                        console.log('🔧 Attaching click listener to switchToMarkdownBtn');
                        switchToMarkdownBtn.addEventListener('click', function(e) {
                            console.log('🔘 MARKDOWN BUTTON CLICKED!', e);
                            e.preventDefault();
                            try {
                                targetFormat = 'markdown';
                                console.log('🔧 Set targetFormat to:', targetFormat);
                                
                                if (conversionDescription) {
                                    conversionDescription.textContent = 'Convert HTML tags to Markdown syntax';
                                    console.log('🔧 Updated conversion description');
                                } else {
                                    console.error('❌ conversionDescription element not found');
                                }
                                
                                if (formatOptions) {
                                    formatOptions.style.display = 'block';
                                    console.log('🔧 Showed format options');
                                } else {
                                    console.error('❌ formatOptions element not found');
                                }
                                
                                this.style.display = 'none';
                                console.log('🔧 Hid markdown button');
                            } catch (error) {
                                console.error('❌ Error in markdown button click handler:', error);
                            }
                        });
                        
                        // Add a test click listener to verify the button can be clicked
                        switchToMarkdownBtn.addEventListener('mousedown', function() {
                            console.log('🖱️ Mouse down on markdown button');
                        });
                        switchToMarkdownBtn.addEventListener('mouseup', function() {
                            console.log('🖱️ Mouse up on markdown button');
                        });
                        
                    } else {
                        console.warn('⚠️ switchToMarkdownBtn not found');
                    }
                    
                } catch (error) {
                    console.error('❌ Error initializing format switching:', error);
                }
                
                // Global test function to manually trigger markdown button
                window.testMarkdownButton = function() {
                    console.log('🧪 Manual test: Looking for markdown button...');
                    const btn = document.getElementById('switch-to-markdown-btn');
                    if (btn) {
                        console.log('🧪 Found button, style display:', getComputedStyle(btn).display);
                        console.log('🧪 Button disabled?', btn.disabled);
                        console.log('🧪 Button visible?', btn.offsetParent !== null);
                        console.log('🧪 Triggering click...');
                        btn.click();
                    } else {
                        console.error('🧪 Button not found');
                    }
                };
                
                // Test for event conflicts - add a global click listener
                document.addEventListener('click', function(e) {
                    if (e.target.id === 'switch-to-markdown-btn') {
                        console.log('🌍 Global click listener caught markdown button click', e);
                    }
                });
                
                // Confirm format switch
                if (confirmBtn) {
                    confirmBtn.addEventListener('click', function() {
                        console.log('🔘 Confirm button clicked, targetFormat:', targetFormat);
                        const convertContent = document.querySelector('input[name="conversionOption"]:checked').value === 'convert';
                        
                        if (convertContent) {
                            // Call server-side conversion
                            convertAndSwitchFormat(targetFormat);
                        } else {
                            // Just switch format without conversion
                            switchFormatOnly(targetFormat);
                        }
                    });
                } else {
                    console.error('❌ confirmBtn not found');
                }
                
                // Cancel format switch
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function() {
                        console.log('🔘 Cancel button clicked');
                        formatOptions.style.display = 'none';
                        // Show the appropriate button again
                        if (targetFormat === 'html') {
                            switchToHtmlBtn.style.display = 'inline-block';
                        } else {
                            switchToMarkdownBtn.style.display = 'inline-block';
                        }
                    });
                } else {
                    console.error('❌ cancelBtn not found');
                }
                
                function switchFormatOnly(newFormat) {
                    console.log('🔧 switchFormatOnly called with:', newFormat);
                    
                    // Update the hidden select
                    if (bodyFormatSelect) {
                        bodyFormatSelect.value = newFormat;
                        console.log('🔧 Updated hidden select to:', newFormat);
                    } else {
                        console.error('❌ bodyFormatSelect not found');
                    }
                    
                    // Update UI
                    updateFormatUI(newFormat);
                    
                    // Hide options
                    if (formatOptions) {
                        formatOptions.style.display = 'none';
                        console.log('🔧 Hid format options');
                    } else {
                        console.error('❌ formatOptions not found when trying to hide');
                    }
                }
                
                function convertAndSwitchFormat(newFormat) {
                    // Get current content from the enhanced editor
                    const editorTextarea = document.querySelector('textarea[id*="simple-editor-"]');
                    const bodyTextarea = document.getElementById('body-textarea');
                    
                    let currentContent = '';
                    if (editorTextarea) {
                        currentContent = editorTextarea.value || '';
                    } else if (bodyTextarea) {
                        currentContent = bodyTextarea.value || '';
                    }
                    
                    if (!currentContent.trim()) {
                        // No content to convert, just switch format
                        switchFormatOnly(newFormat);
                        return;
                    }
                    
                    // Show loading state
                    confirmBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Converting...';
                    confirmBtn.disabled = true;
                    
                    // Call conversion API
                    fetch('/api/convert-content', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            content: currentContent,
                            fromFormat: bodyFormatSelect.value,
                            toFormat: newFormat
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update content in the enhanced editor
                            if (editorTextarea) {
                                editorTextarea.value = data.convertedContent;
                                // Trigger input event to update preview and sync
                                editorTextarea.dispatchEvent(new Event('input', { bubbles: true }));
                            }
                            if (bodyTextarea) {
                                bodyTextarea.value = data.convertedContent;
                            }
                            
                            // Switch format
                            switchFormatOnly(newFormat);
                        } else {
                            alert('Conversion failed: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Conversion error:', error);
                        alert('Conversion failed. Please try again or switch format without conversion.');
                    })
                    .finally(() => {
                        // Restore button state
                        confirmBtn.innerHTML = '<i class="bi bi-check-circle"></i> Confirm Format Switch';
                        confirmBtn.disabled = false;
                    });
                }
                
                function updateFormatUI(newFormat) {
                    // Update badge
                    const badge = document.querySelector('.badge.bg-primary');
                    badge.textContent = newFormat.toUpperCase();
                    
                    // Update editor format for preview rendering
                    if (typeof updateEditorFormat !== 'undefined') {
                        updateEditorFormat(newFormat);
                    }
                    
                    // Show/hide buttons based on new format
                    if (newFormat === 'markdown') {
                        // Show "Change to HTML" button, hide "Change to Markdown" button
                        if (switchToHtmlBtn) {
                            switchToHtmlBtn.style.display = 'inline-block';
                        }
                        if (switchToMarkdownBtn) {
                            switchToMarkdownBtn.style.display = 'none';
                        }
                    } else {
                        // Show "Change to Markdown" button, hide "Change to HTML" button  
                        if (switchToMarkdownBtn) {
                            switchToMarkdownBtn.style.display = 'inline-block';
                        }
                        if (switchToHtmlBtn) {
                            switchToHtmlBtn.style.display = 'none';
                        }
                    }
                    
                    // Note: We don't modify innerHTML to preserve event listeners
                    // The buttons already have the correct text and icons
                }
            });
        </script>
    
    
    <script src="~/js/editor-enhanced.js"></script>
    
    <!-- Fallback drag and drop for when Blazor component isn't working -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔧 Setting up fallback drag-and-drop for edit page...');
            
            // Check if we have the enhanced editor working
            setTimeout(function() {
                const blazorEditor = document.querySelector('textarea[id*="simple-editor-"]');
                if (blazorEditor) {
                    console.log('✅ Blazor editor found, drag-and-drop should be handled by enhanced editor');
                    return;
                }
                
                console.log('⚠️ No Blazor editor found, setting up fallback drag-and-drop on body textarea');
                setupFallbackDragAndDrop();
            }, 2000); // Give Blazor time to initialize
        });
        
        function setupFallbackDragAndDrop() {
            const bodyTextarea = document.getElementById('body-textarea');
            const editorContainer = document.getElementById('editor-container');
            
            if (!bodyTextarea || !editorContainer) {
                console.error('❌ Required elements not found for fallback drag-and-drop');
                return;
            }
            
            // Make textarea visible for drag-and-drop
            bodyTextarea.classList.remove('d-none');
            bodyTextarea.style.minHeight = '400px';
            bodyTextarea.style.fontFamily = 'Monaco, Menlo, Ubuntu Mono, monospace';
            bodyTextarea.style.fontSize = '14px';
            bodyTextarea.placeholder = 'Start writing your wiki content... (drag images here to upload)';
            
            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'drag-drop-overlay d-none';
            overlay.innerHTML = `
                <div class="drag-drop-content">
                    <i class="bi bi-cloud-arrow-up display-1 text-primary"></i>
                    <h4 class="mt-3">Drop images here to upload</h4>
                    <p class="text-muted">Supported formats: JPG, PNG, GIF, WebP</p>
                </div>
            `;
            editorContainer.style.position = 'relative';
            editorContainer.appendChild(overlay);
            
            let dragCounter = 0;
            
            // Add event listeners
            bodyTextarea.addEventListener('dragenter', handleDragEnter);
            bodyTextarea.addEventListener('dragover', handleDragOver);
            bodyTextarea.addEventListener('dragleave', handleDragLeave);
            bodyTextarea.addEventListener('drop', handleDrop);
            
            editorContainer.addEventListener('dragenter', handleDragEnter);
            editorContainer.addEventListener('dragover', handleDragOver);
            editorContainer.addEventListener('dragleave', handleDragLeave);
            editorContainer.addEventListener('drop', handleDrop);
            
            function handleDragEnter(e) {
                console.log('🔽 Fallback drag enter');
                e.preventDefault();
                e.stopPropagation();
                dragCounter++;
                
                if (e.dataTransfer.types.includes('Files')) {
                    overlay.classList.remove('d-none');
                }
            }
            
            function handleDragOver(e) {
                e.preventDefault();
                e.stopPropagation();
                if (e.dataTransfer.types.includes('Files')) {
                    e.dataTransfer.dropEffect = 'copy';
                }
            }
            
            function handleDragLeave(e) {
                e.preventDefault();
                e.stopPropagation();
                dragCounter--;
                
                if (dragCounter <= 0) {
                    dragCounter = 0;
                    overlay.classList.add('d-none');
                }
            }
            
            function handleDrop(e) {
                console.log('🎯 Fallback drop detected!');
                e.preventDefault();
                e.stopPropagation();
                dragCounter = 0;
                
                overlay.classList.add('d-none');
                
                const files = Array.from(e.dataTransfer.files);
                const imageFiles = files.filter(file => file.type.startsWith('image/'));
                
                if (imageFiles.length === 0) {
                    alert('Please drop image files only');
                    return;
                }
                
                // Show upload modal
                showFallbackUploadModal(imageFiles[0]);
            }
            
            console.log('✅ Fallback drag-and-drop setup complete');
        }
        
        function showFallbackUploadModal(file) {
            // Create modal HTML if it doesn't exist
            let modal = document.getElementById('fallback-upload-modal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'fallback-upload-modal';
                modal.className = 'modal fade';
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Upload Image</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div id="fallback-preview" class="text-center mb-3 d-none">
                                    <img id="fallback-preview-img" src="" alt="Preview" class="img-fluid rounded" style="max-height: 200px;">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">File Name <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="fallback-filename" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" id="fallback-description" rows="2"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Alt Text</label>
                                    <input type="text" class="form-control" id="fallback-alttext">
                                </div>
                                <div class="progress d-none" id="fallback-progress">
                                    <div class="progress-bar" role="progressbar"></div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="fallback-upload-btn">Upload & Insert</button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
            }
            
            // Set up modal content
            const preview = document.getElementById('fallback-preview');
            const previewImg = document.getElementById('fallback-preview-img');
            const filenameInput = document.getElementById('fallback-filename');
            const descriptionInput = document.getElementById('fallback-description');
            const altTextInput = document.getElementById('fallback-alttext');
            const uploadBtn = document.getElementById('fallback-upload-btn');
            
            // Show preview
            const reader = new FileReader();
            reader.onload = function(e) {
                previewImg.src = e.target.result;
                preview.classList.remove('d-none');
            };
            reader.readAsDataURL(file);
            
            // Set default filename
            filenameInput.value = file.name.replace(/\.[^/.]+$/, '');
            descriptionInput.value = '';
            altTextInput.value = '';
            
            // Handle upload
            uploadBtn.onclick = function() {
                uploadFallbackImage(file, {
                    filename: filenameInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    altText: altTextInput.value.trim()
                });
            };
            
            // Show modal
            new bootstrap.Modal(modal).show();
        }
        
        async function uploadFallbackImage(file, metadata) {
            const progressContainer = document.getElementById('fallback-progress');
            const progressBar = progressContainer.querySelector('.progress-bar');
            const uploadBtn = document.getElementById('fallback-upload-btn');
            
            progressContainer.classList.remove('d-none');
            uploadBtn.disabled = true;
            
            try {
                const formData = new FormData();
                
                if (metadata.filename) {
                    const extension = file.name.split('.').pop();
                    const newFile = new File([file], `${metadata.filename}.${extension}`, { type: file.type });
                    formData.append('file', newFile);
                } else {
                    formData.append('file', file);
                }
                
                if (metadata.description) formData.append('description', metadata.description);
                if (metadata.altText) formData.append('altText', metadata.altText);
                
                const response = await fetch('/api/media/upload', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error('Upload failed');
                }
                
                const result = await response.json();
                progressBar.style.width = '100%';
                
                // Insert into textarea
                const bodyTextarea = document.getElementById('body-textarea');
                const cursorPos = bodyTextarea.selectionStart;
                const content = bodyTextarea.value;
                const mediaTemplate = `[[media:${result.fileName}]]`;
                
                const newContent = content.substring(0, cursorPos) + mediaTemplate + content.substring(cursorPos);
                bodyTextarea.value = newContent;
                bodyTextarea.focus();
                bodyTextarea.selectionStart = bodyTextarea.selectionEnd = cursorPos + mediaTemplate.length;
                
                // Close modal
                bootstrap.Modal.getInstance(document.getElementById('fallback-upload-modal')).hide();
                
                // Show success message
                alert(`Image "${result.fileName}" uploaded and inserted successfully!`);
                
            } catch (error) {
                console.error('Upload failed:', error);
                alert('Upload failed: ' + error.message);
            } finally {
                progressContainer.classList.add('d-none');
                uploadBtn.disabled = false;
            }
        }
    </script>
    
    <script>
            // Handle EditorSimple button clicks via event delegation
            document.addEventListener('click', function(e) {
                const button = e.target.closest('button[data-action]');
                if (!button || button.disabled) {
                    console.log('Button click ignored - no action or disabled:', button);
                    return;
                }
                
                const action = button.dataset.action;
                console.log('🔘 Button clicked with action:', action);
                
                const editorContainer = button.closest('.editor-container');
                if (!editorContainer) {
                    console.error('Editor container not found');
                    return;
                }
                
                // Find the .NET component reference (set by initEnhancedEditor)
                const componentRef = editorContainer._blazorComponentRef;
                if (!componentRef) {
                    console.error('EditorSimple component reference not found');
                    return;
                }
                
                console.log('🚀 Calling .NET method for action:', action);
                
                // Call the appropriate .NET method
                switch (action) {
                    case 'save-draft':
                        componentRef.invokeMethodAsync('HandleSaveDraft')
                            .then(() => console.log('✅ HandleSaveDraft completed'))
                            .catch(err => console.error('❌ HandleSaveDraft failed:', err));
                        break;
                    case 'commit-changes':
                        componentRef.invokeMethodAsync('HandleCommitChanges')
                            .then(() => console.log('✅ HandleCommitChanges completed'))
                            .catch(err => console.error('❌ HandleCommitChanges failed:', err));
                        break;
                    case 'insert-bold':
                        componentRef.invokeMethodAsync('HandleInsertBold')
                            .then(() => console.log('✅ HandleInsertBold completed'))
                            .catch(err => console.error('❌ HandleInsertBold failed:', err));
                        break;
                    default:
                        console.warn('Unknown action:', action);
                }
            });
        </script>
        <script>
            // Sync editor content with hidden textarea on form submission  
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.querySelector('form');
                if (form) {
                    form.addEventListener('submit', function(e) {
                        try {
                            console.log('🔄 Form submission detected, syncing editor content...');
                            
                            const bodyTextarea = document.getElementById('body-textarea');
                            if (!bodyTextarea) {
                                console.error('❌ Body textarea not found');
                                return;
                            }
                            
                            console.log('📋 Current body textarea value before sync:', bodyTextarea.value.length, 'characters');
                            
                            // Try multiple methods to find the active editor content
                            let editorContent = '';
                            let syncMethod = '';
                            
                            // Method 1: Look for enhanced editor textarea in editor container
                            const editorContainer = document.querySelector('.editor-container');
                            if (editorContainer) {
                                // Try various selectors for the editor textarea
                                const selectors = [
                                    'textarea[id*="simple-editor-"]',
                                    'textarea[id*="editor-"]', 
                                    'textarea.enhanced-editor',
                                    'textarea:not(#body-textarea)',
                                    'textarea'
                                ];
                                
                                for (const selector of selectors) {
                                    const activeEditor = editorContainer.querySelector(selector);
                                    if (activeEditor && activeEditor.id !== 'body-textarea') {
                                        editorContent = activeEditor.value || '';
                                        syncMethod = `container selector: ${selector}`;
                                        break;
                                    }
                                }
                            }
                            
                            // Method 2: Use the enhanced editor global function if available
                            if (!editorContent && typeof getEnhancedEditorContent === 'function') {
                                // Try to find any editor instance
                                const editorTextareas = document.querySelectorAll('textarea:not(#body-textarea)');
                                for (const textarea of editorTextareas) {
                                    if (textarea.id && textarea.id.includes('editor')) {
                                        editorContent = getEnhancedEditorContent(textarea.id) || '';
                                        syncMethod = `global function: ${textarea.id}`;
                                        break;
                                    }
                                }
                            }
                            
                            // Method 3: Try to get content from any visible textarea that's not the hidden one
                            if (!editorContent) {
                                const visibleTextareas = Array.from(document.querySelectorAll('textarea:not(#body-textarea)'))
                                    .filter(ta => ta.offsetParent !== null && ta.value && ta.value.trim());
                                    
                                if (visibleTextareas.length > 0) {
                                    editorContent = visibleTextareas[0].value;
                                    syncMethod = `visible textarea: ${visibleTextareas[0].id || 'unnamed'}`;
                                }
                            }
                            
                            // Update the form textarea
                            if (editorContent) {
                                bodyTextarea.value = editorContent;
                                console.log(`✅ Synced editor content to form textarea (${syncMethod}):`, editorContent.length, 'characters');
                            } else {
                                console.warn('⚠️ No editor content found to sync, form textarea remains:', bodyTextarea.value.length, 'characters');
                                
                                // Debug: list all textareas
                                const allTextareas = document.querySelectorAll('textarea');
                                console.log('📋 All textareas found:', Array.from(allTextareas).map(ta => ({
                                    id: ta.id,
                                    className: ta.className,
                                    visible: ta.offsetParent !== null,
                                    contentLength: ta.value?.length || 0
                                })));
                            }
                        } catch (error) {
                            console.error('❌ Error syncing editor content:', error);
                        }
                    });
                }
            });
            
            // Function called when Blazor editor commits changes
            window.markContentAsCommitted = function() {
                console.log('📝 Content committed via API - updating form button');
                
                const saveButton = document.querySelector('button[type="submit"]');
                if (saveButton) {
                    // Change button text to indicate content was already saved
                    const originalText = saveButton.textContent;
                    saveButton.textContent = 'Already Saved via Editor';
                    saveButton.classList.add('btn-secondary');
                    saveButton.classList.remove('btn-success');
                    
                    // Add warning class to form to indicate potential conflict
                    const form = document.querySelector('form');
                    if (form) {
                        form.style.border = '2px solid orange';
                        form.style.borderRadius = '5px';
                        form.style.padding = '10px';
                        
                        // Add warning message if not already present
                        let warningDiv = document.getElementById('commit-warning');
                        if (!warningDiv) {
                            warningDiv = document.createElement('div');
                            warningDiv.id = 'commit-warning';
                            warningDiv.className = 'alert alert-warning';
                            warningDiv.innerHTML = '<strong>⚠️ Content already saved!</strong> You used "Commit Changes" in the editor. Using "Save Changes" again may overwrite your API changes.';
                            form.insertBefore(warningDiv, form.firstChild);
                        }
                    }
                    
                    // Restore button after 10 seconds
                    setTimeout(() => {
                        saveButton.textContent = originalText;
                        saveButton.classList.remove('btn-secondary');
                        saveButton.classList.add('btn-success');
                    }, 10000);
                }
            };
        </script>
        <script>
            // DOM trap script - runs after Blazor initialization
            (function(){
                console.log('🔧 Installing DOM operation traps...');
                
                function hexify(s){
                    if (typeof s !== "string") return s;
                    return [...s].map(c => `U+${c.codePointAt(0).toString(16).toUpperCase().padStart(4,'0')}(${c})`).join(' ');
                }
                function logFail(kind, obj){
                    const pretty = {};
                    for (const [k,v] of Object.entries(obj)) pretty[k] = typeof v === 'string' ? `${v}  [${hexify(v)}]` : v;
                    console.error(`[trap] ${kind} failed`, pretty);
                    
                    // Also log Blazor state when errors occur
                    if (window.blazorDiagnostics) {
                        console.error('[trap] Blazor state at failure:', window.blazorDiagnostics.logBlazorState());
                    }
                }

                const _sa  = Element.prototype.setAttribute;
                Element.prototype.setAttribute = function(name, value){
                    try { return _sa.call(this, name, value); }
                    catch(e){ logFail('setAttribute', {el:this, name, value, e}); throw e; }
                };

                const _sans = Element.prototype.setAttributeNS;
                Element.prototype.setAttributeNS = function(ns, name, value){
                    try { return _sans.call(this, ns, name, value); }
                    catch(e){ logFail('setAttributeNS', {el:this, ns, name, value, e}); throw e; }
                };

                const _ca = Document.prototype.createAttribute;
                Document.prototype.createAttribute = function(name){
                    try { return _ca.call(this, name); }
                    catch(e){ logFail('createAttribute', {name, e}); throw e; }
                };

                const _ce = Document.prototype.createElement;
                Document.prototype.createElement = function(name){
                    try { return _ce.call(this, name); }
                    catch(e){ logFail('createElement', {name, e}); throw e; }
                };

                const _cc = Document.prototype.createComment;
                Document.prototype.createComment = function(data){
                    try { return _cc.call(this, data); }
                    catch(e){ logFail('createComment', {data, e}); throw e; }
                };

                const _add = DOMTokenList.prototype.add;
                DOMTokenList.prototype.add = function(...tokens){
                    try { return _add.apply(this, tokens); }
                    catch(e){ logFail('classList.add', {el:this, tokens: tokens.map(t => `${t}  [${hexify(t)}]`), e}); throw e; }
                };

                // Optional: catch innerHTML too (invalid markup can also throw)
                const _inner = Object.getOwnPropertyDescriptor(Element.prototype, "innerHTML");
                Object.defineProperty(Element.prototype, "innerHTML", {
                    set(html){ try { return _inner.set.call(this, html); }
                        catch(e){ logFail('innerHTML', {el:this, html, e}); throw e; } },
                    get(){ return _inner.get.call(this); }
                });

                window.addEventListener('error', ev => console.error('[trap] window.error', ev.error || ev));
                window.addEventListener('unhandledrejection', ev => console.error('[trap] unhandledrejection', ev.reason || ev));
                
                console.log('✅ DOM operation traps installed');
            })();
        </script>
        
    <style>
            /* Prism.js Code Block Enhancements */
            .markdown-content pre[class*="language-"] {
                margin: 1.5em 0;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                overflow-x: auto;
                font-size: 14px;
                line-height: 1.5;
            }
            
            .markdown-content code[class*="language-"] {
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
            }
            
            .markdown-content pre[class*="language-"]:before {
                content: attr(data-language);
                position: absolute;
                top: 0.5em;
                right: 1em;
                font-size: 0.75em;
                color: rgba(255,255,255,0.6);
                text-transform: uppercase;
                font-weight: bold;
                letter-spacing: 0.1em;
            }
            
            /* Copy button styling */
            .markdown-content .copy-to-clipboard-button {
                position: absolute;
                top: 0.5em;
                right: 0.5em;
                background: rgba(255,255,255,0.1);
                border: 1px solid rgba(255,255,255,0.2);
                color: rgba(255,255,255,0.8);
                border-radius: 4px;
                padding: 4px 8px;
                font-size: 11px;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .markdown-content .copy-to-clipboard-button:hover {
                background: rgba(255,255,255,0.2);
                color: white;
            }
            
            /* Line numbers styling */
            .markdown-content .line-numbers .line-numbers-rows {
                border-right: 1px solid rgba(255,255,255,0.1);
                margin-right: 1em;
            }
            
            /* Inline code styling */
            .markdown-content code:not([class*="language-"]) {
                background: rgba(0,0,0,0.1);
                padding: 2px 6px;
                border-radius: 3px;
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
                font-size: 0.9em;
                color: #e83e8c;
            }
            
            /* Clean Edit Page Styles */
            .edit-header {
                backdrop-filter: blur(10px);
                background: rgba(255, 255, 255, 0.95) !important;
            }
            
            .card {
                border: 1px solid rgba(0, 0, 0, 0.08);
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                transition: all 0.3s ease;
            }
            
            .card:hover {
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            }
            
            .card-header {
                border-bottom: 1px solid rgba(0, 0, 0, 0.06);
            }
            
            .card-title {
                font-size: 0.95rem;
                color: #495057;
            }
            
            .form-control:focus {
                border-color: #0d6efd;
                box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
                transform: translateY(-1px);
                transition: all 0.2s ease;
            }
            
            .btn {
                font-weight: 500;
                border-radius: 6px;
                transition: all 0.2s ease;
            }
            
            .btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
            }
            
            .badge {
                font-weight: 600;
                letter-spacing: 0.5px;
            }
            
            /* Format conversion dialog */
            #format-conversion-options {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 8px;
                transition: all 0.3s ease;
            }
            
            .form-check-label {
                cursor: pointer;
                padding: 8px 12px;
                border-radius: 6px;
                transition: background-color 0.2s ease;
            }
            
            .form-check-label:hover {
                background-color: rgba(13, 110, 253, 0.08);
            }
            
            .form-check-input:checked + .form-check-label {
                background-color: rgba(25, 135, 84, 0.1);
                border-left: 3px solid #198754;
            }
            
            /* Responsive adjustments */
            @@media (max-width: 768px) {
                .edit-header .row > div {
                    margin-bottom: 1rem;
                }
                
                .edit-header .text-end {
                    text-align: left !important;
                }
                
                .d-flex.flex-wrap {
                    justify-content: flex-start !important;
                }
            }
        </style>
}

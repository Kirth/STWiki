
@page "/{*slug}"
@model STWiki.Pages.Wiki.ViewModel
@{
    ViewData["Title"] = Model.Page?.Title ?? "Page Not Found";
}

@if (Model.Page == null)
{
    <div class="alert alert-warning">
        <h4>Page Not Found</h4>
        <p>The page "@Model.Slug" does not exist.</p>
        @if (User.Identity?.IsAuthenticated == true)
        {
            <a asp-page="/Wiki/Edit" asp-route-slug="@Model.Slug" class="btn btn-primary">Create Page</a>
        }
    </div>
}
else
{
    <div class="wiki-page">
        <!-- Header row: Breadcrumbs left, Actions right -->
        <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-3">
            <div class="flex-grow-1 min-w-0">
                <component type="typeof(STWiki.Components.Breadcrumb)" 
                           render-mode="ServerPrerendered"
                           param-CurrentSlug="@Model.Slug"
                           param-ShowSiblings="true"
                           param-ShowActions="false"
                           param-Options="@(new STWiki.Services.BreadcrumbOptions { ShowSingleLevel = true })"
                           param-CssClass="@("mb-0")">
                </component>
            </div>

            <nav class="d-flex flex-wrap gap-3 ms-3 small text-muted">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <a href="/@Model.Slug/edit" class="text-decoration-none text-muted">
                        <i class="bi bi-pencil me-1"></i>Edit Page
                    </a>
                    <a href="/@Model.Slug/history" class="text-decoration-none text-muted">
                        <i class="bi bi-clock-history me-1"></i>View History
                    </a>
                    <a href="/new?parent=@Model.Slug" class="text-decoration-none text-muted">
                        <i class="bi bi-file-plus me-1"></i>New Sub-page
                    </a>
                }
                <a href="#" onclick="copyPageUrl(event)" class="text-decoration-none text-muted">
                    <i class="bi bi-link me-1"></i>Copy Link
                </a>
            </nav>
        </div>

        <h1 class="mb-0 text-truncate">@Model.Page.Title</h1>


        @*
        if (!string.IsNullOrEmpty(Model.Page.Summary))
        {
            <div class="page-summary mb-4">
                <div class="card border-0 bg-light">
                    <div class="card-body py-3">
                        <div class="d-flex align-items-start">
                            <i class="bi bi-info-circle text-primary me-2 mt-1"></i>
                            <p class="lead mb-0 text-dark">@Model.Page.Summary</p>
                        </div>
                    </div>
                </div>
            </div>
        }*@
        
        <div class="wiki-content">
            @Html.Raw(Model.RenderedContent)
        </div>
        
        <footer class="mt-4 pt-3 border-top text-muted small">
            @if (Model.UpdatedByUser != null)
            {
                <text>Last updated @Model.Page.UpdatedAt.ToString("yyyy-MM-dd HH:mm") by @Html.UserLink(Model.UpdatedByUser)</text>
            }
            else
            {
                <text>Last updated @Model.Page.UpdatedAt.ToString("yyyy-MM-dd HH:mm") by @Html.UserLink(Model.Page.UpdatedBy, Model.Page.UpdatedBy)</text>
            }
        </footer>
    </div>
}

@section Scripts {
    <!-- Prism.js Syntax Highlighting -->
    <link href="~/lib/prism/prism.min.css" rel="stylesheet" />
    <script src="~/lib/prism/prism.min.js"></script>
    <!-- Essential Languages -->
    <script src="~/lib/prism/prism-javascript.min.js"></script>
    <script src="~/lib/prism/prism-python.min.js"></script>
    <script src="~/lib/prism/prism-csharp.min.js"></script>
    <script src="~/lib/prism/prism-css.min.js"></script>
    <script src="~/lib/prism/prism-html.min.js"></script>
    <script src="~/lib/prism/prism-json.min.js"></script>
    <script src="~/lib/prism/prism-sql.min.js"></script>
    <script src="~/lib/prism/prism-bash.min.js"></script>
    
    <script>
        // Auto-highlight all code blocks on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('ðŸŽ¨ Applying syntax highlighting to view page...');
            Prism.highlightAll();
        });
        
        // Copy page URL to clipboard
        function copyPageUrl(event) {
          if (event != null) { event.preventDefault(); }
            const url = window.location.href;
            navigator.clipboard.writeText(url).then(function() {
                const toast = document.createElement('div');
                toast.className = 'toast-notification';
                toast.textContent = 'Page URL copied to clipboard!';
                toast.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: var(--bs-success);
                    color: white;
                    padding: 0.75rem 1rem;
                    border-radius: 0.375rem;
                    z-index: 1050;
                    animation: slideIn 0.3s ease-out;
                `;
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.style.animation = 'slideOut 0.3s ease-out';
                    setTimeout(() => document.body.removeChild(toast), 300);
                }, 3000);
            }).catch(function(err) {
                console.error('Could not copy text: ', err);
                alert('Failed to copy URL to clipboard');
            });
        }
        
    </script>
    
    <style>
        /* Prism.js Code Block Enhancements */
        .wiki-content pre[class*="language-"] {
            margin: 1.5em 0;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow-x: auto;
            font-size: 14px;
            line-height: 1.5;
            position: relative;
        }
        
        .wiki-content code[class*="language-"] {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
        }
        
        .wiki-content pre[class*="language-"]:before {
            content: attr(data-language);
            position: absolute;
            top: 0.5em;
            right: 1em;
            font-size: 0.75em;
            color: rgba(255,255,255,0.6);
            text-transform: uppercase;
            font-weight: bold;
            letter-spacing: 0.1em;
        }
        
        /* Inline code styling */
        .wiki-content code:not([class*="language-"]) {
            background: rgba(0,0,0,0.1);
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
            font-size: 0.9em;
            color: #e83e8c;
        }

        /* Keep breadcrumb/actions tight on one line when possible */
        .wiki-page .min-w-0 { min-width: 0; }
        .wiki-page nav a:hover { text-decoration: underline; }
        
        @@keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to   { transform: translateX(0);    opacity: 1; }
        }
        @@keyframes slideOut {
            from { transform: translateX(0);    opacity: 1; }
            to   { transform: translateX(100%); opacity: 0; }
        }
    </style>
}

